/*****
Form class

The purpose of this class is to manage the display of the forms and to pass
information between main and the sub-forms
*****/

// Require the React framework
var React = require('react');

// Require other components for sub-forms and form navigation
var ErrorModal = require('ErrorModal');
var FormFrequency = require('FormFrequency');
var FormKeyboard = require('FormKeyboard');
var FormMicrophone = require('FormMicrophone');
var FormNav = require('FormNav');
var FormNumberPad = require('FormNumberPad');
var FormShephards = require('FormShephards');
var FormWhiteNoise = require('FormWhiteNoise');

// Create the Form class
var Form = React.createClass({
	// require the handlePlayFrequency function to pass frequency information
	//   back through Main
	propTypes: {
		handlePlayFrequency: React.PropTypes.func.isRequired,
		context: React.PropTypes.object.isRequired,
		soundMute: React.PropTypes.func.isRequired
	},		// propTypes

	/*
	getInitialState function

	Set up initial form to display to form 0 (FormFrequency)
	*/
	getInitialState: function() {
		var {handlePlayFrequency, context, analyser, soundMute} = this.props;

		var formsArray = [
			{
				label: 'Frequency Generator',
				module: (
					<FormFrequency playFrequency={handlePlayFrequency}>
						<ErrorModal>
							<div>
								<h2>Welcome</h2>
								<p>
									Welcome to the Web-Based Audio Spectrum Analyzer. This initial
									screen acts as a tone generator.
								</p>
								<p>
									At the top of the screen, just under the title, you can see
									the menu of options this program will run.
								</p>
								<p>
									Just under the menu, you can see the two visual
									representations of sound, the waveform on the top and a
									graph of the frequency generated by that waveform on the
									bottom.
								</p>
								<p>
									Anywhere in this program, you can pause the graph by
									pressing the spacebar.
								</p>
								<h2>Frequency Generator</h2>
								<p>
									Just below the graph, you can see the options for the
									frequency generator. To start hearing a frequency, move one
									of the volume sliders up. To change the frequency, you can
									either use the frequency slider or type the number in the
									box and press enter. Use the volume slider to make the tone
									louder or softer. If you don't want to hear a tone anymore,
									just turn the volume all the way down.
								</p>
								<p>
									Human hearing goes from about 20Hz - 20,000Hz, so if you're
									using the text box, put a frequency in there between those
									values.
								</p>
							</div>
						</ErrorModal>
					</FormFrequency>
				)
			},
			{
				label: 'Number Pad',
				module: (
					<FormNumberPad playFrequency={handlePlayFrequency}>
						<ErrorModal>
							<div>
								<h2>Number Pad</h2>
								<p>
									This part of the program acts as a number pad, just like on a
									telephone dial pad. Press a button, and you can hear the tone
									a telephone sends if that button is pressed.
								</p>
								<p>
									You can also dial the numbers by using the number keys on your
									keyboard (0-9).
								</p>
								<p>
									To control the volume, use the slider on the right.
								</p>
							</div>
						</ErrorModal>
					</FormNumberPad>
				)
			},
			{
				label: 'White Noise Generator',
				module: (
					<FormWhiteNoise playWhiteNoise={handlePlayFrequency}>
						<ErrorModal>
							<div>
								<h2>White Noise Generator</h2>
								<p>
									This is the white noise generator. It generates a static sound
									by using a bunch of random values instead of a regular wave.
								</p>
								<p>
									To use it, move the volume slider up. You can shut it off by
									moving the slider all the way down.
								</p>
							</div>
						</ErrorModal>
					</FormWhiteNoise>
				)
			},
			{
				label: 'Microphone Input',
				module: (
					<FormMicrophone context={context} analyser={analyser}
						soundMute={soundMute}>
						<ErrorModal>
							<div>
								<h2>Microphone Input</h2>
								<p>
									This part of the program lets you use your computer's microphone
									to show the waveform and the frequencies that it picks up. You
									can play an instrument, or sing, or whistle, or even make other
									bodily sounds. We don't judge.
								</p>
								<p>
									If you make a noise that has a pitch, and then make another that
									has a higher pitch, check out how the waveform looks a little
									more tightly packed and how the frequency bars move to the right
									to follow the pitch. Also, notice how the waveform stretches
									taller with louder sounds and keeps close to the line when
									things are quieter.
								</p>
							</div>
						</ErrorModal>
					</FormMicrophone>
				)
			},
			{
				label: 'Music Keyboard Input',
				module: (
					<FormKeyboard playFrequency={handlePlayFrequency}>
						<ErrorModal>
							<div>
								<h2>Music Keyboard Input</h2>
								<p>
									This part of the program shows how frequencies and tones are
									related to musical pitches.
								</p>
								<p>
									To play the piano keyboard, click on one of the keys. You can
									see the waveform and the frequency it produces.
								</p>
								<p>
									You can also play the keyboard with the letter keys on your
									computer keyboard. Just press the letter or number written on
									the piano key.
								</p>
								<p>
									Notice how the wave for low C (the left key) is half as
									tightly packed in as for the middle C (the middle key), which is
									itself only half as tightly packed as the high C (the right key).
								</p>
								<p>
									To control the volume, use the slider on the right.
								</p>
							</div>
						</ErrorModal>
					</FormKeyboard>
				)
			},
			{
				label: "Shephard's Tone",
				module: (
					<FormShephards playFrequency={handlePlayFrequency}>
						<ErrorModal>
							<div>
								<h2>Shephard's Tone</h2>
								<p>
									This is an example of an audio illusion, where your ears
									hear things that arenâ€™t really there.
								</p>
								<p>
									Click the Start Sound button to start playing a sound.
									Notice the Current Pitch below the Auto button on the right
									says C. Now click the Sound Up button. It should sound
									higher pitched. Either click the Auto button on the right to
									listen through the next 11 pitches or else click the Sound
									Up button 11 more times. After those increases, the Current
									Pitch should say C. That is the same sound you started with!
									If you clicked Auto, you can click it again to stop
									increasing the pitches.
								</p>
								<p>
									This also works going down the scale. If you click the Sound
									Down button and then click the Auto button, you can listen
									as the tone goes down and down to the same pitch you started
									on.
								</p>
								<p>
									The Stop Sound button stops all the sounds. You can also
									control the volume with the Volume slider control.
								</p>
							</div>
						</ErrorModal>
					</FormShephards>
				)
			}
	];

	return {
		formDisplayed: 0,
		formsArray: formsArray
	};		// return object
},			// getInitialState function

/*
setCurrentForm function

If the form to display changes, stop the sound and update the state
Called from the navigation module
*/
setCurrentForm: function(formNumber) {
	// check to see if the form to display has changed from the state
	if(this.state.formDisplayed != formNumber) {
		// stop all sound with the mode change
		this.props.handlePlayFrequency([], [], undefined, formNumber);
		// check valid form
		if(
			(Number.isInteger(formNumber)) &&
			(formNumber >= 0) &&
			(formNumber <= this.state.formsArray.length)
		) {
			// update the state
			this.setState ({
				formDisplayed: formNumber
			});			// setState
		}				// if the formNumber was valid
	}					// if the formDisplayed changed
},					// setCurrentForm function

/*
render function

renders the component to the web browser -- the default entry point
*/
render: function() {

	/*
	renderCurrentFrom function

	finds the current form to display from the form parameter and renders the
	proper form
	*/
	var renderCurrentFrom = (form) => {
		if(this.props.hidden) {
			return '';
		}

		if(
			(Number.isInteger(form)) &&
			(form >= 0) &&
			(form <= this.state.formsArray.length)
		) {
			return this.state.formsArray[form].module;
		} else {
			return this.state.formsArray[0].module;
		}
	}						// renderCurrentFrom function

	return (
		<div>
			<FormNav
				setForm={this.setCurrentForm}
				formsArray={this.state.formsArray}/>
			{this.props.children}
			<div>
				{renderCurrentFrom(this.state.formDisplayed)}
			</div>
		</div>
	);
}
});

// export Form for other modules to use
module.exports = Form;
